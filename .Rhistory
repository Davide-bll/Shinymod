observe({
# if the trajectory input is true
if(input$traj) {
grps <- df_filtered_history()[[criteria()]]  %>% unique()
clrs <- colorpal2(grps)
# clear map
proxy <- leafletProxy("my_leaf") %>%
clearShapes()
# create list of dataframe: splitting rule -> person id
l_data <- split(df_filtered_history(), df_filtered_history()[[points_col]])
criteria <- criteria()
# add trajectories for every person selected
map(.x = l_data,
wrap_myleaflet,
gruppo_list = grps,
color_list  = clrs,
label       = as.character(criteria),
proxy       = proxy,
criteria    = criteria,
traj_col    = traj_col)
} else {
# clear trajcetories otherwise
leafletProxy("my_leaf") %>% clearShapes()
}
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("my_leaf", data = df_filtered_history())
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend & input$traj) {
grps <- df_filtered_history()[[criteria()]]  %>% unique()
criteria <- criteria()
proxy %>% addLegend(position = "topright",
colors = colorpal2(grps),
labels = grps,
title = paste(criteria, "Legend ", sep = " "))
}
})
}
require(shiny)
require(dplyr)
if(interactive()) {
df <- feather::read_feather("C://Users//Utente//Desktop//Maputo//transport_mode_detection//data_speed_acc_new.feather") %>%
slice(1:100)
df <- rename(df, time = datetime, pid  = person_id, tid  = trajectory_id,)
ui <- fluidPage(
leafletMapUi("map")
)
server <- function(input, output, session) {
callModule(leafletMap, "map", data = df, v_anim = 1, date_col = "time", points_col = "pid", traj_col = "tid")
}
shinyApp(ui, server)
}
require(leaflet)
#'   slice(1:100)
#' df <- rename(df, time = datetime, pid  = person_id, tid  = trajectory_id,)
#' ui <- fluidPage(
#'   leafletMapUi("map")
#' )
#' server <- function(input, output, session) {
#'   callModule(leafletMap, "map", data = df, v_anim = 1, date_col = "time", points_col = "pid", traj_col = "tid")
#' }
#' shinyApp(ui, server)
#'}
leafletMap <- function(input, output, session, data, date_col = "datetime",
points_col = "person_id",
v_anim = 24,
traj_col = "trajectory_id") {
# define UI parameters
min_date <- data[[date_col]] %>% min()
max_date <- data[[date_col]] %>% max()
l_vars <- extract_types(data)
output$time <- renderUI({
ns <- session$ns
sliderInput(inputId = ns("time"), label = "Choose Time Interval",
min     = min_date,
max     = max_date,
value   = c(min_date, max_date),
step    = 3600 * v_anim * 5, # set to increment by v_anim hours, adjust appropriately
animate = TRUE)
})
output$pvec <- renderUI({
ns <- session$ns
min_p <- data[[points_col]] %>% min()
max_p <- data[[points_col]] %>% max()
sliderInput(ns("pvec"), "Choose ID Persons",
min       = min_p,
max       = max_p,
value     = c(0,1),
animate   = FALSE,
dragRange = TRUE)
})
# REACTIVE VARIABLES  --------------
pvec <- reactive({ input$pvec })
# user input: final time of date
end_date <- reactive({
req(input$time)
c(min(input$time), max(input$time))
})
output$tvec <- renderUI({
# # find consistent trajectories
ns <- session$ns
req(end_date, pvec)
browser()
l_values <- user_filter_m(data, list(date_col, points_col), list(end_date(), pvec())) %>%
pull(!!sym(traj_col)) %>% unique()
min_val <- ifelse(length(l_values > 0), min(l_values), 0)
max_val <- ifelse(length(l_values > 0), max(l_values), 1)
sliderInput(ns("tvec"), "Choose range of trajectories",
min       = min_val,
max       = max_val,
value     = c(min_val , max_val),
step      = 1,
animate   = TRUE,
dragRange = TRUE)
})
# trajectory  reactive vals
tvec <- reactive({
if(!is.null(input$tvec))  {
c(input$tvec[[1]],input$tvec[[2]])
} else return(c(0,1))
})
output$criteria <- renderUI({
ns <- session$ns
choices <- l_vars[["chc_vars"]]
selectInput(ns("criteria"), "Choose a grouping criteria", choices = choices)
})
# color palette: based on the trajectorys selected
colorpal <- reactive({
colorFactor(input$colors, domain = NULL)
})
# color palette function: is not reactive, and it's for the trajectories
colorpal2 <- leaflet::colorFactor(rownames(subset(brewer.pal.info, category %in% c("seq", "div")))[5],
domain = NULL)
# criteria of grouping
criteria <- reactive({
validate(need(input$criteria, message = FALSE))
input$criteria
})
# filtered data input-----------
df_filtered_history <- reactiveVal(data)
observe({
new_val <- user_filter_m(data, params = list(date_col, points_col, traj_col),
vals   = list(end_date(), pvec(), tvec())) %>%
arrange(!!sym(points_col), !!sym(date_col))
df_filtered_history(new_val)
})
# create static map-------------
output$my_leaf <- renderLeaflet({
center_lat <- data[["lat"]] %>% mean()
center_lng <- data[["lng"]] %>% mean()
leaflet() %>%
addTiles() %>%
# initial center of the map
setView(lat = center_lat, lng = center_lng, zoom = 13)
})
#  add circles: ----------------
observe({
# create arguments
pal <- colorpal()
proxy <-     leafletProxy(mapId = "my_leaf") %>%
clearMarkers() # clear previous markers, otherwise the circles won't be reactive
addCircles_map(proxy, data = df_filtered_history(), points_col = points_col, pal = pal)
})
#  add polylines--------------
observe({
# if the trajectory input is true
if(input$traj) {
grps <- df_filtered_history()[[criteria()]]  %>% unique()
clrs <- colorpal2(grps)
# clear map
proxy <- leafletProxy("my_leaf") %>%
clearShapes()
# create list of dataframe: splitting rule -> person id
l_data <- split(df_filtered_history(), df_filtered_history()[[points_col]])
criteria <- criteria()
# add trajectories for every person selected
map(.x = l_data,
wrap_myleaflet,
gruppo_list = grps,
color_list  = clrs,
label       = as.character(criteria),
proxy       = proxy,
criteria    = criteria,
traj_col    = traj_col)
} else {
# clear trajcetories otherwise
leafletProxy("my_leaf") %>% clearShapes()
}
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("my_leaf", data = df_filtered_history())
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend & input$traj) {
grps <- df_filtered_history()[[criteria()]]  %>% unique()
criteria <- criteria()
proxy %>% addLegend(position = "topright",
colors = colorpal2(grps),
labels = grps,
title = paste(criteria, "Legend ", sep = " "))
}
})
}
require(shiny)
require(dplyr)
if(interactive()) {
df <- feather::read_feather("C://Users//Utente//Desktop//Maputo//transport_mode_detection//data_speed_acc_new.feather") %>%
slice(1:100)
df <- rename(df, time = datetime, pid  = person_id, tid  = trajectory_id,)
ui <- fluidPage(
leafletMapUi("map")
)
server <- function(input, output, session) {
callModule(leafletMap, "map", data = df, v_anim = 1, date_col = "time", points_col = "pid", traj_col = "tid")
}
shinyApp(ui, server)
}
data
end_date
date_col, points_col
list(date_col, points_col)
end_date()
pvec()
end_date()
end_date
input$time
#'   slice(1:100)
#' df <- rename(df, time = datetime, pid  = person_id, tid  = trajectory_id,)
#' ui <- fluidPage(
#'   leafletMapUi("map")
#' )
#' server <- function(input, output, session) {
#'   callModule(leafletMap, "map", data = df, v_anim = 1, date_col = "time", points_col = "pid", traj_col = "tid")
#' }
#' shinyApp(ui, server)
#'}
leafletMap <- function(input, output, session, data, date_col = "datetime",
points_col = "person_id",
v_anim = 24,
traj_col = "trajectory_id") {
# define UI parameters
min_date <- data[[date_col]] %>% min()
max_date <- data[[date_col]] %>% max()
l_vars <- extract_types(data)
output$time <- renderUI({
ns <- session$ns
sliderInput(inputId = ns("time"), label = "Choose Time Interval",
min     = min_date,
max     = max_date,
value   = c(min_date, max_date),
step    = 3600 * v_anim * 5, # set to increment by v_anim hours, adjust appropriately
animate = TRUE)
})
output$pvec <- renderUI({
ns <- session$ns
min_p <- data[[points_col]] %>% min()
max_p <- data[[points_col]] %>% max()
sliderInput(ns("pvec"), "Choose ID Persons",
min       = min_p,
max       = max_p,
value     = c(0,1),
animate   = FALSE,
dragRange = TRUE)
})
# REACTIVE VARIABLES  --------------
pvec <- reactive({ input$pvec })
# user input: final time of date
end_date <- reactive({
req(input$time)
c(min(input$time), max(input$time))
})
output$tvec <- renderUI({
# # find consistent trajectories
ns <- session$ns
req(end_date(), pvec())
browser()
l_values <- user_filter_m(data, list(date_col, points_col), list(end_date(), pvec())) %>%
pull(!!sym(traj_col)) %>% unique()
min_val <- ifelse(length(l_values > 0), min(l_values), 0)
max_val <- ifelse(length(l_values > 0), max(l_values), 1)
sliderInput(ns("tvec"), "Choose range of trajectories",
min       = min_val,
max       = max_val,
value     = c(min_val , max_val),
step      = 1,
animate   = TRUE,
dragRange = TRUE)
})
# trajectory  reactive vals
tvec <- reactive({
if(!is.null(input$tvec))  {
c(input$tvec[[1]],input$tvec[[2]])
} else return(c(0,1))
})
output$criteria <- renderUI({
ns <- session$ns
choices <- l_vars[["chc_vars"]]
selectInput(ns("criteria"), "Choose a grouping criteria", choices = choices)
})
# color palette: based on the trajectorys selected
colorpal <- reactive({
colorFactor(input$colors, domain = NULL)
})
# color palette function: is not reactive, and it's for the trajectories
colorpal2 <- leaflet::colorFactor(rownames(subset(brewer.pal.info, category %in% c("seq", "div")))[5],
domain = NULL)
# criteria of grouping
criteria <- reactive({
validate(need(input$criteria, message = FALSE))
input$criteria
})
# filtered data input-----------
df_filtered_history <- reactiveVal(data)
observe({
new_val <- user_filter_m(data, params = list(date_col, points_col, traj_col),
vals   = list(end_date(), pvec(), tvec())) %>%
arrange(!!sym(points_col), !!sym(date_col))
df_filtered_history(new_val)
})
# create static map-------------
output$my_leaf <- renderLeaflet({
center_lat <- data[["lat"]] %>% mean()
center_lng <- data[["lng"]] %>% mean()
leaflet() %>%
addTiles() %>%
# initial center of the map
setView(lat = center_lat, lng = center_lng, zoom = 13)
})
#  add circles: ----------------
observe({
# create arguments
pal <- colorpal()
proxy <-     leafletProxy(mapId = "my_leaf") %>%
clearMarkers() # clear previous markers, otherwise the circles won't be reactive
addCircles_map(proxy, data = df_filtered_history(), points_col = points_col, pal = pal)
})
#  add polylines--------------
observe({
# if the trajectory input is true
if(input$traj) {
grps <- df_filtered_history()[[criteria()]]  %>% unique()
clrs <- colorpal2(grps)
# clear map
proxy <- leafletProxy("my_leaf") %>%
clearShapes()
# create list of dataframe: splitting rule -> person id
l_data <- split(df_filtered_history(), df_filtered_history()[[points_col]])
criteria <- criteria()
# add trajectories for every person selected
map(.x = l_data,
wrap_myleaflet,
gruppo_list = grps,
color_list  = clrs,
label       = as.character(criteria),
proxy       = proxy,
criteria    = criteria,
traj_col    = traj_col)
} else {
# clear trajcetories otherwise
leafletProxy("my_leaf") %>% clearShapes()
}
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("my_leaf", data = df_filtered_history())
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend & input$traj) {
grps <- df_filtered_history()[[criteria()]]  %>% unique()
criteria <- criteria()
proxy %>% addLegend(position = "topright",
colors = colorpal2(grps),
labels = grps,
title = paste(criteria, "Legend ", sep = " "))
}
})
}
require(shiny)
require(dplyr)
if(interactive()) {
df <- feather::read_feather("C://Users//Utente//Desktop//Maputo//transport_mode_detection//data_speed_acc_new.feather") %>%
slice(1:100)
df <- rename(df, time = datetime, pid  = person_id, tid  = trajectory_id,)
ui <- fluidPage(
leafletMapUi("map")
)
server <- function(input, output, session) {
callModule(leafletMap, "map", data = df, v_anim = 1, date_col = "time", points_col = "pid", traj_col = "tid")
}
shinyApp(ui, server)
}
end_date()
pvec()
user_filter_m(data, list(date_col, points_col), list(end_date(), pvec())) %>%
pull(!!sym(traj_col)) %>% unique()
user_filter_m
user_filter_m(data, list(date_col, points_col), list(end_date(), pvec()))
data
end_date()
points_col
pvec()
data$pid
x <- data
date_col
param <- date_col
end_date(
end_date()
val <- end_date()
val
is.numeric(val)
is.datetime(val)
sym(param)
param <- sym(param)
x %>%
filter(!!param <= max(val) & !!param >= min(val))
x <- x %>%
filter(!!param <= max(val) & !!param >= min(val))
x
param <- points_col
val <- pvec()
val
param
val
param <- sym(param)
param
x %>%
filter(!!param <= max(val) & !!param >= min(val))
is.numeric(val)
is.numeric(val) | is.datetime(val)
x <- x %>%
filter(!!param <= max(val) & !!param >= min(val))
x
user_filter_m(data, list(date_col, points_col), list(end_date(), pvec()))
x <- data
params <- list(date_col, points_col)
params
val <- list(end_date(), pvec())
vals <- list(end_date(), pvec())
1:length(params)
x <- data
for (i in (1:length(params))) {
x <- user_filter(x, params[[i]], vals[[i]])
}
x
i = 1
x <- data
params <- list(date_col, points_col)
vals <- list(end_date(), pvec())
x <- user_filter(x, params[[i]], vals[[i]])
x <- data
debugonce(user_filter)
i = 1
x <- data
params <- list(date_col, points_col)
vals <- list(end_date(), pvec())
x <- user_filter(x, params[[i]], vals[[i]])
param
# works for numerical and datevars
param <- sym(param)
if(is.numeric(val) | is.datetime(val)) {
x <- x %>%
filter(!!param <= max(val) & !!param >= min(val))
}
x <- data
params <- list(date_col, points_col)
vals <- list(end_date(), pvec())
require(shiny)
require(dplyr)
if(interactive()) {
df <- feather::read_feather("C://Users//Utente//Desktop//Maputo//transport_mode_detection//data_speed_acc_new.feather") %>%
slice(1:100)
df <- rename(df, time = datetime, pid  = person_id, tid  = trajectory_id,)
ui <- fluidPage(
leafletMapUi("map")
)
server <- function(input, output, session) {
callModule(leafletMap, "map", data = df, v_anim = 1, date_col = "time", points_col = "pid", traj_col = "tid")
}
shinyApp(ui, server)
}
user_filter_m(data, list(date_col, points_col), list(end_date(), pvec()))
x <- data
params <- list(date_col, points_col)
vals <- list(end_date(), pvec())
user_filter(x, param = params[[1]], val = vals[[1]])
user_filter(x, param = date_col, val = end_date())
param = date_col
val = end_date()
user_filter(x, param, val)
params[[1]]
vals[[1]]
param
val
param <- sym(param)
param
x %>%
filter(!!param <= max(val) & !!param >= min(val))
x <- x %>%
filter(!!param <= max(val) & !!param >= min(val))
x
is.character(val)
val
x <- data
user_filter_m(data, list(date_col, points_col), list(end_date(), pvec()))
help("user_filter")
help("user_filter_m")
